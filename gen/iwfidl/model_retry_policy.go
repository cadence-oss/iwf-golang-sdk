/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// RetryPolicy struct for RetryPolicy
type RetryPolicy struct {
	InitialIntervalSeconds *int32 `json:"initialIntervalSeconds,omitempty"`
	BackoffCoefficient *float32 `json:"backoffCoefficient,omitempty"`
	MaximumIntervalSeconds *int32 `json:"maximumIntervalSeconds,omitempty"`
	MaximumAttempts *int32 `json:"maximumAttempts,omitempty"`
}

// NewRetryPolicy instantiates a new RetryPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetryPolicy() *RetryPolicy {
	this := RetryPolicy{}
	return &this
}

// NewRetryPolicyWithDefaults instantiates a new RetryPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetryPolicyWithDefaults() *RetryPolicy {
	this := RetryPolicy{}
	return &this
}

// GetInitialIntervalSeconds returns the InitialIntervalSeconds field value if set, zero value otherwise.
func (o *RetryPolicy) GetInitialIntervalSeconds() int32 {
	if o == nil || isNil(o.InitialIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.InitialIntervalSeconds
}

// GetInitialIntervalSecondsOk returns a tuple with the InitialIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetInitialIntervalSecondsOk() (*int32, bool) {
	if o == nil || isNil(o.InitialIntervalSeconds) {
    return nil, false
	}
	return o.InitialIntervalSeconds, true
}

// HasInitialIntervalSeconds returns a boolean if a field has been set.
func (o *RetryPolicy) HasInitialIntervalSeconds() bool {
	if o != nil && !isNil(o.InitialIntervalSeconds) {
		return true
	}

	return false
}

// SetInitialIntervalSeconds gets a reference to the given int32 and assigns it to the InitialIntervalSeconds field.
func (o *RetryPolicy) SetInitialIntervalSeconds(v int32) {
	o.InitialIntervalSeconds = &v
}

// GetBackoffCoefficient returns the BackoffCoefficient field value if set, zero value otherwise.
func (o *RetryPolicy) GetBackoffCoefficient() float32 {
	if o == nil || isNil(o.BackoffCoefficient) {
		var ret float32
		return ret
	}
	return *o.BackoffCoefficient
}

// GetBackoffCoefficientOk returns a tuple with the BackoffCoefficient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetBackoffCoefficientOk() (*float32, bool) {
	if o == nil || isNil(o.BackoffCoefficient) {
    return nil, false
	}
	return o.BackoffCoefficient, true
}

// HasBackoffCoefficient returns a boolean if a field has been set.
func (o *RetryPolicy) HasBackoffCoefficient() bool {
	if o != nil && !isNil(o.BackoffCoefficient) {
		return true
	}

	return false
}

// SetBackoffCoefficient gets a reference to the given float32 and assigns it to the BackoffCoefficient field.
func (o *RetryPolicy) SetBackoffCoefficient(v float32) {
	o.BackoffCoefficient = &v
}

// GetMaximumIntervalSeconds returns the MaximumIntervalSeconds field value if set, zero value otherwise.
func (o *RetryPolicy) GetMaximumIntervalSeconds() int32 {
	if o == nil || isNil(o.MaximumIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.MaximumIntervalSeconds
}

// GetMaximumIntervalSecondsOk returns a tuple with the MaximumIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetMaximumIntervalSecondsOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumIntervalSeconds) {
    return nil, false
	}
	return o.MaximumIntervalSeconds, true
}

// HasMaximumIntervalSeconds returns a boolean if a field has been set.
func (o *RetryPolicy) HasMaximumIntervalSeconds() bool {
	if o != nil && !isNil(o.MaximumIntervalSeconds) {
		return true
	}

	return false
}

// SetMaximumIntervalSeconds gets a reference to the given int32 and assigns it to the MaximumIntervalSeconds field.
func (o *RetryPolicy) SetMaximumIntervalSeconds(v int32) {
	o.MaximumIntervalSeconds = &v
}

// GetMaximumAttempts returns the MaximumAttempts field value if set, zero value otherwise.
func (o *RetryPolicy) GetMaximumAttempts() int32 {
	if o == nil || isNil(o.MaximumAttempts) {
		var ret int32
		return ret
	}
	return *o.MaximumAttempts
}

// GetMaximumAttemptsOk returns a tuple with the MaximumAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryPolicy) GetMaximumAttemptsOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumAttempts) {
    return nil, false
	}
	return o.MaximumAttempts, true
}

// HasMaximumAttempts returns a boolean if a field has been set.
func (o *RetryPolicy) HasMaximumAttempts() bool {
	if o != nil && !isNil(o.MaximumAttempts) {
		return true
	}

	return false
}

// SetMaximumAttempts gets a reference to the given int32 and assigns it to the MaximumAttempts field.
func (o *RetryPolicy) SetMaximumAttempts(v int32) {
	o.MaximumAttempts = &v
}

func (o RetryPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InitialIntervalSeconds) {
		toSerialize["initialIntervalSeconds"] = o.InitialIntervalSeconds
	}
	if !isNil(o.BackoffCoefficient) {
		toSerialize["backoffCoefficient"] = o.BackoffCoefficient
	}
	if !isNil(o.MaximumIntervalSeconds) {
		toSerialize["maximumIntervalSeconds"] = o.MaximumIntervalSeconds
	}
	if !isNil(o.MaximumAttempts) {
		toSerialize["maximumAttempts"] = o.MaximumAttempts
	}
	return json.Marshal(toSerialize)
}

type NullableRetryPolicy struct {
	value *RetryPolicy
	isSet bool
}

func (v NullableRetryPolicy) Get() *RetryPolicy {
	return v.value
}

func (v *NullableRetryPolicy) Set(val *RetryPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableRetryPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableRetryPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetryPolicy(val *RetryPolicy) *NullableRetryPolicy {
	return &NullableRetryPolicy{value: val, isSet: true}
}

func (v NullableRetryPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetryPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


