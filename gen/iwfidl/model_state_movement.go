/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// StateMovement struct for StateMovement
type StateMovement struct {
	StateId string `json:"stateId"`
	StateInput *EncodedObject `json:"stateInput,omitempty"`
	StateOptions *WorkflowStateOptions `json:"stateOptions,omitempty"`
}

// NewStateMovement instantiates a new StateMovement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateMovement(stateId string) *StateMovement {
	this := StateMovement{}
	this.StateId = stateId
	return &this
}

// NewStateMovementWithDefaults instantiates a new StateMovement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateMovementWithDefaults() *StateMovement {
	this := StateMovement{}
	return &this
}

// GetStateId returns the StateId field value
func (o *StateMovement) GetStateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateId
}

// GetStateIdOk returns a tuple with the StateId field value
// and a boolean to check if the value has been set.
func (o *StateMovement) GetStateIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StateId, true
}

// SetStateId sets field value
func (o *StateMovement) SetStateId(v string) {
	o.StateId = v
}

// GetStateInput returns the StateInput field value if set, zero value otherwise.
func (o *StateMovement) GetStateInput() EncodedObject {
	if o == nil || isNil(o.StateInput) {
		var ret EncodedObject
		return ret
	}
	return *o.StateInput
}

// GetStateInputOk returns a tuple with the StateInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateMovement) GetStateInputOk() (*EncodedObject, bool) {
	if o == nil || isNil(o.StateInput) {
    return nil, false
	}
	return o.StateInput, true
}

// HasStateInput returns a boolean if a field has been set.
func (o *StateMovement) HasStateInput() bool {
	if o != nil && !isNil(o.StateInput) {
		return true
	}

	return false
}

// SetStateInput gets a reference to the given EncodedObject and assigns it to the StateInput field.
func (o *StateMovement) SetStateInput(v EncodedObject) {
	o.StateInput = &v
}

// GetStateOptions returns the StateOptions field value if set, zero value otherwise.
func (o *StateMovement) GetStateOptions() WorkflowStateOptions {
	if o == nil || isNil(o.StateOptions) {
		var ret WorkflowStateOptions
		return ret
	}
	return *o.StateOptions
}

// GetStateOptionsOk returns a tuple with the StateOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateMovement) GetStateOptionsOk() (*WorkflowStateOptions, bool) {
	if o == nil || isNil(o.StateOptions) {
    return nil, false
	}
	return o.StateOptions, true
}

// HasStateOptions returns a boolean if a field has been set.
func (o *StateMovement) HasStateOptions() bool {
	if o != nil && !isNil(o.StateOptions) {
		return true
	}

	return false
}

// SetStateOptions gets a reference to the given WorkflowStateOptions and assigns it to the StateOptions field.
func (o *StateMovement) SetStateOptions(v WorkflowStateOptions) {
	o.StateOptions = &v
}

func (o StateMovement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stateId"] = o.StateId
	}
	if !isNil(o.StateInput) {
		toSerialize["stateInput"] = o.StateInput
	}
	if !isNil(o.StateOptions) {
		toSerialize["stateOptions"] = o.StateOptions
	}
	return json.Marshal(toSerialize)
}

type NullableStateMovement struct {
	value *StateMovement
	isSet bool
}

func (v NullableStateMovement) Get() *StateMovement {
	return v.value
}

func (v *NullableStateMovement) Set(val *StateMovement) {
	v.value = val
	v.isSet = true
}

func (v NullableStateMovement) IsSet() bool {
	return v.isSet
}

func (v *NullableStateMovement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateMovement(val *StateMovement) *NullableStateMovement {
	return &NullableStateMovement{value: val, isSet: true}
}

func (v NullableStateMovement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateMovement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


