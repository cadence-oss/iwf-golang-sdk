/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// CommandCarryOverType the model 'CommandCarryOverType'
type CommandCarryOverType string

// List of CommandCarryOverType
const (
	NONE CommandCarryOverType = "NONE"
)

// All allowed values of CommandCarryOverType enum
var AllowedCommandCarryOverTypeEnumValues = []CommandCarryOverType{
	"NONE",
}

func (v *CommandCarryOverType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommandCarryOverType(value)
	for _, existing := range AllowedCommandCarryOverTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommandCarryOverType", value)
}

// NewCommandCarryOverTypeFromValue returns a pointer to a valid CommandCarryOverType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommandCarryOverTypeFromValue(v string) (*CommandCarryOverType, error) {
	ev := CommandCarryOverType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommandCarryOverType: valid values are %v", v, AllowedCommandCarryOverTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommandCarryOverType) IsValid() bool {
	for _, existing := range AllowedCommandCarryOverTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommandCarryOverType value
func (v CommandCarryOverType) Ptr() *CommandCarryOverType {
	return &v
}

type NullableCommandCarryOverType struct {
	value *CommandCarryOverType
	isSet bool
}

func (v NullableCommandCarryOverType) Get() *CommandCarryOverType {
	return v.value
}

func (v *NullableCommandCarryOverType) Set(val *CommandCarryOverType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandCarryOverType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandCarryOverType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandCarryOverType(val *CommandCarryOverType) *NullableCommandCarryOverType {
	return &NullableCommandCarryOverType{value: val, isSet: true}
}

func (v NullableCommandCarryOverType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandCarryOverType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
