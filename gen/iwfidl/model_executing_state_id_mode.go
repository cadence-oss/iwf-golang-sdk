/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// ExecutingStateIdMode the model 'ExecutingStateIdMode'
type ExecutingStateIdMode string

// List of ExecutingStateIdMode
const (
	ENABLED_FOR_ALL                    ExecutingStateIdMode = "ENABLED_FOR_ALL"
	ENABLED_FOR_STATES_WITH_WAIT_UNTIL ExecutingStateIdMode = "ENABLED_FOR_STATES_WITH_WAIT_UNTIL"
	DISABLED                           ExecutingStateIdMode = "DISABLED"
)

// All allowed values of ExecutingStateIdMode enum
var AllowedExecutingStateIdModeEnumValues = []ExecutingStateIdMode{
	"ENABLED_FOR_ALL",
	"ENABLED_FOR_STATES_WITH_WAIT_UNTIL",
	"DISABLED",
}

func (v *ExecutingStateIdMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExecutingStateIdMode(value)
	for _, existing := range AllowedExecutingStateIdModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExecutingStateIdMode", value)
}

// NewExecutingStateIdModeFromValue returns a pointer to a valid ExecutingStateIdMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExecutingStateIdModeFromValue(v string) (*ExecutingStateIdMode, error) {
	ev := ExecutingStateIdMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExecutingStateIdMode: valid values are %v", v, AllowedExecutingStateIdModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExecutingStateIdMode) IsValid() bool {
	for _, existing := range AllowedExecutingStateIdModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExecutingStateIdMode value
func (v ExecutingStateIdMode) Ptr() *ExecutingStateIdMode {
	return &v
}

type NullableExecutingStateIdMode struct {
	value *ExecutingStateIdMode
	isSet bool
}

func (v NullableExecutingStateIdMode) Get() *ExecutingStateIdMode {
	return v.value
}

func (v *NullableExecutingStateIdMode) Set(val *ExecutingStateIdMode) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutingStateIdMode) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutingStateIdMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutingStateIdMode(val *ExecutingStateIdMode) *NullableExecutingStateIdMode {
	return &NullableExecutingStateIdMode{value: val, isSet: true}
}

func (v NullableExecutingStateIdMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutingStateIdMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
