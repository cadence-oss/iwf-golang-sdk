/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// SearchAttributeKeyAndType struct for SearchAttributeKeyAndType
type SearchAttributeKeyAndType struct {
	Key *string `json:"key,omitempty"`
	ValueType *SearchAttributeValueType `json:"valueType,omitempty"`
}

// NewSearchAttributeKeyAndType instantiates a new SearchAttributeKeyAndType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchAttributeKeyAndType() *SearchAttributeKeyAndType {
	this := SearchAttributeKeyAndType{}
	return &this
}

// NewSearchAttributeKeyAndTypeWithDefaults instantiates a new SearchAttributeKeyAndType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchAttributeKeyAndTypeWithDefaults() *SearchAttributeKeyAndType {
	this := SearchAttributeKeyAndType{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SearchAttributeKeyAndType) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttributeKeyAndType) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
    return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SearchAttributeKeyAndType) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SearchAttributeKeyAndType) SetKey(v string) {
	o.Key = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SearchAttributeKeyAndType) GetValueType() SearchAttributeValueType {
	if o == nil || isNil(o.ValueType) {
		var ret SearchAttributeValueType
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttributeKeyAndType) GetValueTypeOk() (*SearchAttributeValueType, bool) {
	if o == nil || isNil(o.ValueType) {
    return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SearchAttributeKeyAndType) HasValueType() bool {
	if o != nil && !isNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given SearchAttributeValueType and assigns it to the ValueType field.
func (o *SearchAttributeKeyAndType) SetValueType(v SearchAttributeValueType) {
	o.ValueType = &v
}

func (o SearchAttributeKeyAndType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}

type NullableSearchAttributeKeyAndType struct {
	value *SearchAttributeKeyAndType
	isSet bool
}

func (v NullableSearchAttributeKeyAndType) Get() *SearchAttributeKeyAndType {
	return v.value
}

func (v *NullableSearchAttributeKeyAndType) Set(val *SearchAttributeKeyAndType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchAttributeKeyAndType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchAttributeKeyAndType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchAttributeKeyAndType(val *SearchAttributeKeyAndType) *NullableSearchAttributeKeyAndType {
	return &NullableSearchAttributeKeyAndType{value: val, isSet: true}
}

func (v NullableSearchAttributeKeyAndType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchAttributeKeyAndType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


