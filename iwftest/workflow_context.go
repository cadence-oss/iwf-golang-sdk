// Code generated by MockGen. DO NOT EDIT.
// Source: iwf/workflow_context.go

// Package iwftest is a generated GoMock package.
package iwftest

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowContext is a mock of WorkflowContext interface.
type MockWorkflowContext struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowContextMockRecorder
}

// MockWorkflowContextMockRecorder is the mock recorder for MockWorkflowContext.
type MockWorkflowContextMockRecorder struct {
	mock *MockWorkflowContext
}

// NewMockWorkflowContext creates a new mock instance.
func NewMockWorkflowContext(ctrl *gomock.Controller) *MockWorkflowContext {
	mock := &MockWorkflowContext{ctrl: ctrl}
	mock.recorder = &MockWorkflowContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowContext) EXPECT() *MockWorkflowContextMockRecorder {
	return m.recorder
}

// Deadline mocks base method.
func (m *MockWorkflowContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockWorkflowContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockWorkflowContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockWorkflowContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockWorkflowContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockWorkflowContext)(nil).Done))
}

// Err mocks base method.
func (m *MockWorkflowContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockWorkflowContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockWorkflowContext)(nil).Err))
}

// GetAttempt mocks base method.
func (m *MockWorkflowContext) GetAttempt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttempt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAttempt indicates an expected call of GetAttempt.
func (mr *MockWorkflowContextMockRecorder) GetAttempt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttempt", reflect.TypeOf((*MockWorkflowContext)(nil).GetAttempt))
}

// GetFirstAttemptTimestampSeconds mocks base method.
func (m *MockWorkflowContext) GetFirstAttemptTimestampSeconds() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstAttemptTimestampSeconds")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetFirstAttemptTimestampSeconds indicates an expected call of GetFirstAttemptTimestampSeconds.
func (mr *MockWorkflowContextMockRecorder) GetFirstAttemptTimestampSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstAttemptTimestampSeconds", reflect.TypeOf((*MockWorkflowContext)(nil).GetFirstAttemptTimestampSeconds))
}

// GetStateExecutionId mocks base method.
func (m *MockWorkflowContext) GetStateExecutionId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateExecutionId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStateExecutionId indicates an expected call of GetStateExecutionId.
func (mr *MockWorkflowContextMockRecorder) GetStateExecutionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateExecutionId", reflect.TypeOf((*MockWorkflowContext)(nil).GetStateExecutionId))
}

// GetWorkflowId mocks base method.
func (m *MockWorkflowContext) GetWorkflowId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkflowId indicates an expected call of GetWorkflowId.
func (mr *MockWorkflowContextMockRecorder) GetWorkflowId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowId", reflect.TypeOf((*MockWorkflowContext)(nil).GetWorkflowId))
}

// GetWorkflowRunId mocks base method.
func (m *MockWorkflowContext) GetWorkflowRunId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkflowRunId indicates an expected call of GetWorkflowRunId.
func (mr *MockWorkflowContextMockRecorder) GetWorkflowRunId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunId", reflect.TypeOf((*MockWorkflowContext)(nil).GetWorkflowRunId))
}

// GetWorkflowStartTimestampSeconds mocks base method.
func (m *MockWorkflowContext) GetWorkflowStartTimestampSeconds() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowStartTimestampSeconds")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetWorkflowStartTimestampSeconds indicates an expected call of GetWorkflowStartTimestampSeconds.
func (mr *MockWorkflowContextMockRecorder) GetWorkflowStartTimestampSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowStartTimestampSeconds", reflect.TypeOf((*MockWorkflowContext)(nil).GetWorkflowStartTimestampSeconds))
}

// Value mocks base method.
func (m *MockWorkflowContext) Value(key any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockWorkflowContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockWorkflowContext)(nil).Value), key)
}
