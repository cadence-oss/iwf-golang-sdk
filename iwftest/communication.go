// Code generated by MockGen. DO NOT EDIT.
// Source: iwf/communication.go

// Package iwftest is a generated GoMock package.
package iwftest

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	iwfidl "github.com/indeedeng/iwf-golang-sdk/gen/iwfidl"
)

// MockCommunication is a mock of Communication interface.
type MockCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationMockRecorder
}

// MockCommunicationMockRecorder is the mock recorder for MockCommunication.
type MockCommunicationMockRecorder struct {
	mock *MockCommunication
}

// NewMockCommunication creates a new mock instance.
func NewMockCommunication(ctrl *gomock.Controller) *MockCommunication {
	mock := &MockCommunication{ctrl: ctrl}
	mock.recorder = &MockCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunication) EXPECT() *MockCommunicationMockRecorder {
	return m.recorder
}

// GetToPublishInterStateChannel mocks base method.
func (m *MockCommunication) GetToPublishInternalChannel() map[string][]iwfidl.EncodedObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToPublishInternalChannel")
	ret0, _ := ret[0].(map[string][]iwfidl.EncodedObject)
	return ret0
}

// GetToPublishInterStateChannel indicates an expected call of GetToPublishInterStateChannel.
func (mr *MockCommunicationMockRecorder) GetToPublishInterStateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToPublishInternalChannel", reflect.TypeOf((*MockCommunication)(nil).GetToPublishInternalChannel))
}

// PublishInterstateChannel mocks base method.
func (m *MockCommunication) PublishInternalChannel(channelName string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishInternalChannel", channelName, value)
}

// PublishInterstateChannel indicates an expected call of PublishInterstateChannel.
func (mr *MockCommunicationMockRecorder) PublishInterstateChannel(channelName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishInternalChannel", reflect.TypeOf((*MockCommunication)(nil).PublishInternalChannel), channelName, value)
}

// MockcommunicationInternal is a mock of communicationInternal interface.
type MockcommunicationInternal struct {
	ctrl     *gomock.Controller
	recorder *MockcommunicationInternalMockRecorder
}

// MockcommunicationInternalMockRecorder is the mock recorder for MockcommunicationInternal.
type MockcommunicationInternalMockRecorder struct {
	mock *MockcommunicationInternal
}

// NewMockcommunicationInternal creates a new mock instance.
func NewMockcommunicationInternal(ctrl *gomock.Controller) *MockcommunicationInternal {
	mock := &MockcommunicationInternal{ctrl: ctrl}
	mock.recorder = &MockcommunicationInternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommunicationInternal) EXPECT() *MockcommunicationInternalMockRecorder {
	return m.recorder
}

// GetToPublishInterStateChannel mocks base method.
func (m *MockcommunicationInternal) GetToPublishInternalChannel() map[string][]iwfidl.EncodedObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToPublishInternalChannel")
	ret0, _ := ret[0].(map[string][]iwfidl.EncodedObject)
	return ret0
}

// GetToPublishInterStateChannel indicates an expected call of GetToPublishInterStateChannel.
func (mr *MockcommunicationInternalMockRecorder) GetToPublishInterStateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToPublishInternalChannel", reflect.TypeOf((*MockcommunicationInternal)(nil).GetToPublishInternalChannel))
}
